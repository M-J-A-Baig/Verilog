Code:                        

• Design Module

	•parameter Module
		`define mem_addr_len  8
		`define mem_locations  8

	•interface Module
		`include "parameters.sv"

		interface  Ports(input clock);
  
         	logic reset;
        	logic op;
		logic [$clog2(`mem_addr_len) -1  : 0] addr;
  		logic [(`mem_locations -1) : 0] data_in;
                logic [(`mem_locations-1) : 0] out_val;
  
  
  		modport tb(input out_val,clock, output reset,op,addr,data_in);
  		modport dut(input reset,op,addr,data_in,output out_val,clock);
  
  		endinterface

	• Main Module
		// Code your design here
		// Code your design here

		`include "parameters.sv"
		`include "interface.sv"
		// parameter addr_bits = $clog2(mem_addr_len); 

		module Memory(Ports ports_memory);
  
  		reg [ (`mem_locations-1) : 0] out;
  		reg [`mem_locations-1:0]  memory_register [`mem_locations]; // unpacked array - unorganized memory block/cells
		//   reg [7:0]  memory_register [7:0] // packed array - continous memory block/cells
  
  		always @(negedge ports_memory.clock)
    			begin 
      				if(ports_memory.reset)
         			begin 
            				out <= 0 ;
           				for (int i = 0 ; i<= (`mem_locations -1); i++)
              					begin
                					memory_register[i] <= 0; 
              					end
           			end
       			else
          			begin
            			if (ports_memory.op)
                 			begin
                   			memory_register [ports_memory.addr] <= ports_memory.data_in;// write
                 			end
              			else
                 			begin
                   			out <=  memory_register [ports_memory.addr]; // read
                 			end
           			end
      
    			end
  
  		assign ports_memory.out_val = out;
		endmodule



• TestBench

	module tb();
  	bit clock;
  
  	always #5 clock = ~clock;
  
  	Ports ports_memory(clock);     //interface
  
  	Memory dut(ports_memory.dut); //ports from modports
  
  	initial
    		begin
     		clock = 1;
      		setup();    // task from inside module
    		end
  
  	initial
    		begin
      		ports_memory.dut.reset = 1;
      		#15
      		ports_memory.dut.reset = 0;
    		end
  
  	initial
    		begin
      		ports_memory.dut.data_in <= 00110010;
      		#60
      		ports_memory.dut.data_in <= 01111110;
    		end

	initial
		begin
      		wave();  // task from outside module
    		end

	task setup();
  
  	  for (int i = 0; i<=(`mem_addr_len) -1 ; i++) begin @(negedge clock)
    	  ports_memory.dut.addr = $random;
    	  end
      
      	  for(int i = 0; i<= 500; i++) begin @(posedge clock)
          ports_memory.dut.op = $random;
      	  end
	endtask
	endmodule

	task wave();
  		$dumpfile("dump.vcd");
      		$dumpvars();
      		#500
      		$finish;
  	endtask
